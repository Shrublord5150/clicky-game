{"version":3,"sources":["components/SmokeCard.js","components/Navbar.js","components/Jumbotron.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["SmokeCard","props","react_default","a","createElement","className","value","id","onClick","handleClickedCard","alt","src","image","Navbar","href","score","topScore","Jumbotron","instructions","Wrapper","children","clickedCards","App","state","cards","console","log","_this","indexOf","setState","length","push","sort","Math","random","_this2","this","components_Wrapper","components_Navbar","components_Jumbotron","map","card","components_SmokeCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30d1c968.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Card.css\";\r\n\r\n\r\nfunction SmokeCard(props) {\r\n    return (\r\n      <div className=\"card\" value={props.id} onClick={() => props.handleClickedCard(props.id)}>\r\n        <div className=\"img-container\">\r\n        <img alt={props.id} src={props.image} />\r\n\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default SmokeCard;\r\n","import React from \"react\";\r\nimport \"../styles/Navbar.css\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top shadow p-3 mb-5 rounded background \">\r\n        <div className=\"container\">\r\n        <h1> <a href=\"http://localhost:3000/\">Up In Smoke...</a></h1>\r\n        </div>\r\n        <ul className=\"mr-sm-4\">\r\n          <li >Score: {props.score}</li>\r\n          <li>Top Score: {props.topScore}</li>\r\n        </ul>\r\n\r\n\r\n\r\n\r\n\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"../styles/Jumbotron.css\";\r\n\r\nfunction Jumbotron(props) {\r\n  return (\r\n    <div className=\"jumbotron\">\r\n    <h2>Instructions: {props.instructions}</h2>\r\n\r\n  </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport \"../styles/Wrapper.css\";\r\n\r\nfunction Wrapper (props){\r\n\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n} \r\n\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport cards from \"./cards.json\";\nimport SmokeCard from \"./components/SmokeCard\"\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Wrapper from \"./components/Wrapper\";\nimport './App.css';\n\n\nlet score = 0;\nlet topScore = 0;\nlet instructions = \"Click on a smoky image to get a point, but dont click on the same one twice!\";\nlet clickedCards = [];\n\nclass App extends Component {\n\n  state = {\n    cards,\n    score,\n    topScore,\n    instructions,\n    clickedCards\n    \n  };\n\nhandleClickedCard = (id) => {\n\n  console.log(\"clicked: \" + id);\n\n\n  let clickedCards = this.state.clickedCards\n  if (clickedCards.indexOf(id) !== -1) {\n    // YOU LOSE\n    instructions = \"Smoked! Sorry, that Smokey Card was already clicked! Try again...\";\n    clickedCards = [];\n    score = 0;\n    this.setState({instructions})\n    this.setState({clickedCards})\n    this.setState({score})\n    console.log(instructions)\n    \n  } else if (clickedCards.length < 9){\n    clickedCards.push(id);\n    score++\n    instructions = \"Smokin! Keep going!\"\n\n    if (score > topScore){\n      topScore = score;\n      this.setState({ topScore });\n    }\n\n    console.log(score)\n    console.log(topScore)\n    console.log(instructions)\n\n    // Found this shuffle function online at https://css-tricks.com/snippets/javascript/shuffle-array/ \n    let cards = this.state.cards\n    cards.sort(function() { return 0.5 - Math.random() });\n\n    this.setState({instructions})\n    this.setState({clickedCards})\n    this.setState({score})\n\n  \n  } else {\n    instructions = \"Winner, Winner, Chicken Dinner! Wanna try for another?\"\n    topScore = 10\n    score = 0\n    clickedCards = [];\n\n    // Found this shuffle function online at https://css-tricks.com/snippets/javascript/shuffle-array/ \n    let cards = this.state.cards\n    cards.sort(function() { return 0.5 - Math.random() });\n\n    this.setState({instructions})\n    this.setState({clickedCards})\n    this.setState({score})\n    this.setState({topScore})\n\n    console.log(instructions)\n    \n  }\n\n}\n  \n  render() {\n    return (\n      <Wrapper>\n        <Navbar \n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n\n        <Jumbotron\n        instructions={this.state.instructions}\n        />\n          \n        {\n          this.state.cards.map(card => (\n          <SmokeCard\n            id={card.id}\n            key={card.id}\n            image={card.image}\n            handleClickedCard={this.handleClickedCard}\n          />\n        ))}\n\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}